
import org.cprover.CProver;

public class DeutschJozsaQiskit {
  
  public DeutschJozsaQiskit() {
    super();
  }
  public static final int N = 3;
    /*@
      requires 1 <= a < 1 << N; 
      ensures \result == oracleType; 
      assignable \nothing; 
   */

  public static boolean dj(boolean oracleType, boolean oracleValue, int a) {
    float[] q0 = new float[]{1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F};
    {
      {
      }
    }
    {
      {
      }
    }
    {
      {
      }
    }
    q0 = new float[]{0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F};
    if (!oracleType) {
      {
        if (oracleValue) {
          {
          }
          q0 = new float[]{-0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F};
        } else {
          {
          }
        }
      }
    } else {
      {
        {
          {
            if ((a & (1 << 0)) != 0) {
              {
              }
              q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], q0[9], q0[8], q0[11], q0[10], q0[13], q0[12], q0[15], q0[14]};
            }
          }
        }
        {
          {
            if ((a & (1 << 1)) != 0) {
              {
              }
              q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[5], q0[4], q0[7], q0[6], q0[8], q0[9], q0[10], q0[11], q0[13], q0[12], q0[15], q0[14]};
            }
          }
        }
        {
          {
            if ((a & (1 << 2)) != 0) {
              {
              }
              q0 = new float[]{q0[0], q0[1], q0[3], q0[2], q0[4], q0[5], q0[7], q0[6], q0[8], q0[9], q0[11], q0[10], q0[12], q0[13], q0[15], q0[14]};
            }
          }
        }
      }
    }
    {
      {
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[8], 0.70710677F * q0[1] + 0.70710677F * q0[9], 0.70710677F * q0[2] + 0.70710677F * q0[10], 0.70710677F * q0[3] + 0.70710677F * q0[11], 0.70710677F * q0[4] + 0.70710677F * q0[12], 0.70710677F * q0[5] + 0.70710677F * q0[13], 0.70710677F * q0[6] + 0.70710677F * q0[14], 0.70710677F * q0[7] + 0.70710677F * q0[15], 0.70710677F * q0[0] + -0.70710677F * q0[8], 0.70710677F * q0[1] + -0.70710677F * q0[9], 0.70710677F * q0[2] + -0.70710677F * q0[10], 0.70710677F * q0[3] + -0.70710677F * q0[11], 0.70710677F * q0[4] + -0.70710677F * q0[12], 0.70710677F * q0[5] + -0.70710677F * q0[13], 0.70710677F * q0[6] + -0.70710677F * q0[14], 0.70710677F * q0[7] + -0.70710677F * q0[15]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[4], 0.70710677F * q0[1] + 0.70710677F * q0[5], 0.70710677F * q0[2] + 0.70710677F * q0[6], 0.70710677F * q0[3] + 0.70710677F * q0[7], 0.70710677F * q0[0] + -0.70710677F * q0[4], 0.70710677F * q0[1] + -0.70710677F * q0[5], 0.70710677F * q0[2] + -0.70710677F * q0[6], 0.70710677F * q0[3] + -0.70710677F * q0[7], 0.70710677F * q0[8] + 0.70710677F * q0[12], 0.70710677F * q0[9] + 0.70710677F * q0[13], 0.70710677F * q0[10] + 0.70710677F * q0[14], 0.70710677F * q0[11] + 0.70710677F * q0[15], 0.70710677F * q0[8] + -0.70710677F * q0[12], 0.70710677F * q0[9] + -0.70710677F * q0[13], 0.70710677F * q0[10] + -0.70710677F * q0[14], 0.70710677F * q0[11] + -0.70710677F * q0[15]};
      }
    }
    q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[2], 0.70710677F * q0[1] + 0.70710677F * q0[3], 0.70710677F * q0[0] + -0.70710677F * q0[2], 0.70710677F * q0[1] + -0.70710677F * q0[3], 0.70710677F * q0[4] + 0.70710677F * q0[6], 0.70710677F * q0[5] + 0.70710677F * q0[7], 0.70710677F * q0[4] + -0.70710677F * q0[6], 0.70710677F * q0[5] + -0.70710677F * q0[7], 0.70710677F * q0[8] + 0.70710677F * q0[10], 0.70710677F * q0[9] + 0.70710677F * q0[11], 0.70710677F * q0[8] + -0.70710677F * q0[10], 0.70710677F * q0[9] + -0.70710677F * q0[11], 0.70710677F * q0[12] + 0.70710677F * q0[14], 0.70710677F * q0[13] + 0.70710677F * q0[15], 0.70710677F * q0[12] + -0.70710677F * q0[14], 0.70710677F * q0[13] + -0.70710677F * q0[15]};
    float[] probs = new float[]{q0[0] * q0[0], q0[1] * q0[1], q0[2] * q0[2], q0[3] * q0[3], q0[4] * q0[4], q0[5] * q0[5], q0[6] * q0[6], q0[7] * q0[7], q0[8] * q0[8], q0[9] * q0[9], q0[10] * q0[10], q0[11] * q0[11], q0[12] * q0[12], q0[13] * q0[13], q0[14] * q0[14], q0[15] * q0[15]};
    float highestProb = 0.0F;
    for (int loopVarI = 0; loopVarI <= 15; ++loopVarI) {
      if (probs[loopVarI] > highestProb) highestProb = probs[loopVarI];
    }
    int randIdx = CProver.nondetInt();
    /*@ assume 0 <= randIdx && randIdx < 16;*/
    int tmp_measure_var = 0;
    if (probs[randIdx] > highestProb - 0.02F) tmp_measure_var = randIdx; else {
      /*@ assume false;*/
    }
    int res = tmp_measure_var >> 1;
    return res != 0;
  }
}