
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'idea'
    id 'java'
    id 'antlr'
}

test.testLogging.showStandardStreams = true


repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use OpenJml and Picolini
    implementation fileTree(include: ['*.jar'], dir: 'lib')
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    //Use JUnit Platform
    test.useJUnitPlatform()

    //Use antlr to parse qasm
    antlr "org.antlr:antlr4:4.7"
}

application {
    // Define the main class for the application.
    mainClass = 'QIn.CLI'
}

test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

test {
  beforeTest { descriptor ->
     logger.lifecycle("Running test: ${descriptor}")
  }
}

task fatJar(type: Jar) {
    manifest {
        attributes "Main-Class": "QIn.CLI"
    }
    archiveBaseName = 'QIn'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    doLast {
        copy {
            from 'build/libs/QIn.jar'
            into '.'
        }
    }
}

tasks.register('testCaseStudies', Test) {
     description = 'Runs integration tests.'
     group = 'verification'
     useJUnitPlatform()
     testClassesDirs = sourceSets.test.output.classesDirs
  beforeTest { descriptor ->
     logger.lifecycle("Running test: ${descriptor}")
  }
     filter {
            includeTestsMatching "*Translations.*"
     }
}

//tasks.withType(JavaCompile) {
//    options.compilerArgs << '-Xlint:unchecked'
//    options.deprecation = true
//}